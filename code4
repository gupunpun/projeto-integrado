# Sistema de Gerenciamento de Pacientes para Clínica Vida+ (Passo 2)
# Incluindo simulação de Controle de Acesso (Passo 3)
# Usando listas e dicionários para armazenar dados

pacientes = []  # Lista de dicionários: [{'nome': str, 'idade': int, 'telefone': str}]

def mostrar_menu():
    """Exibe o menu de opções."""
    print("=" * 30)
    print("SISTEMA CLÍNICA VIDA+")
    print("=" * 30)
    print("1. Cadastrar paciente")
    print("2. Ver estatísticas")
    print("3. Buscar paciente")
    print("4. Listar todos os pacientes")
    print("5. Verificar Acesso ao Atendimento")  # Integração do Passo 3
    print("6. Sair")
    print("=" * 30)

def cadastrar_paciente():
    """Cadastra um novo paciente com validações."""
    print("\n--- CADASTRO DE PACIENTE ---")
    nome = input("Nome do paciente: ").strip().title()
    if not nome:
        print("Erro: O nome não pode estar vazio.")
        return
    
    while True:
        try:
            idade = int(input("Idade: "))
            if idade <= 0:
                print("Erro: A idade deve ser um número positivo.")
                continue
            break
        except ValueError:
            print("Erro: Idade inválida. Digite um número inteiro.")
    
    telefone = input("Telefone: ").strip()
    
    # Adiciona à lista
    pacientes.append({'nome': nome, 'idade': idade, 'telefone': telefone})
    print("Paciente cadastrado com sucesso!")

def ver_estatisticas():
    """Calcula e exibe estatísticas dos pacientes."""
    print("\n--- ESTATÍSTICAS ---")
    if not pacientes:
        print("Nenhum paciente cadastrado.")
        return
    
    total_pacientes = len(pacientes)
    idades = [p['idade'] for p in pacientes]
    media_idade = sum(idades) / total_pacientes
    
    # Paciente mais novo e mais velho
    min_idade = min(idades)
    max_idade = max(idades)
    paciente_mais_novo = next(p['nome'] for p in pacientes if p['idade'] == min_idade)
    paciente_mais_velho = next(p['nome'] for p in pacientes if p['idade'] == max_idade)
    
    print(f"Número total de pacientes cadastrados: {total_pacientes}")
    print(f"Idade média dos pacientes: {media_idade:.2f} anos")
    print(f"Paciente mais novo: {paciente_mais_novo} ({min_idade} anos)")
    print(f"Paciente mais velho: {paciente_mais_velho} ({max_idade} anos)")

def buscar_paciente():
    """Busca um paciente pelo nome."""
    print("\n--- BUSCAR PACIENTE ---")
    busca = input("Digite o nome do paciente: ").strip().lower()
    if not busca:
        print("Erro: Digite um nome para buscar.")
        return
    
    encontrados = [p for p in pacientes if busca in p['nome'].lower()]
    if not encontrados:
        print("Nenhum paciente encontrado.")
        return
    
    print(f"{len(encontrados)} paciente(s) encontrado(s):")
    for p in encontrados:
        print(f"Nome: {p['nome']}, Idade: {p['idade']}, Telefone: {p['telefone']}")

def listar_pacientes():
    """Lista todos os pacientes de forma organizada."""
    print("\n--- LISTA DE PACIENTES ---")
    if not pacientes:
        print("Nenhum paciente cadastrado.")
        return
    
    print(f"{'Nº':<4} | {'Nome':<25} | {'Idade':<6} | {'Telefone':<15}")
    print("-" * 55)
    for idx, p in enumerate(pacientes, start=1):
        print(f"{idx:<4} | {p['nome']:<25} | {p['idade']:<6} | {p['telefone']:<15}")

def verificar_acesso_atendimento():
    """Simula o controle de acesso ao atendimento (Passo 3)."""
    print("\n--- VERIFICAR ACESSO AO ATENDIMENTO ---")
    print("Variáveis lógicas:")
    print("A: Paciente tem agendamento marcado (V/F)")
    print("B: Paciente está com documentos em dia (RG/CPF válidos) (V/F)")
    print("C: Há médico disponível no horário (V/F)")
    print("D: Paciente está em dia com pagamentos anteriores (V/F)")
    
    # Entrada das condições
    a = input("A (V/F): ").strip().upper() == 'V'
    b = input("B (V/F): ").strip().upper() == 'V'
    c = input("C (V/F): ").strip().upper() == 'V'
    d = input("D (V/F): ").strip().upper() == 'V'
    
    # Expressões lógicas (Passo 3 - Tarefa 1)
    print("\n--- EXPRESSÕES LÓGICAS ---")
    consulta_normal = (a and b and c) or (b and c and d)
    emergencia = c and (b or d)
    print(f"Consulta Normal: (A ∧ B ∧ C) ∨ (B ∧ C ∧ D) = {consulta_normal}")
    print(f"Emergência: C ∧ (B ∨ D) = {emergencia}")
    
    # Tabelas verdade (Passo 3 - Tarefas 2 e 3)
    print("\n--- TABELA VERDADE PARA CONSULTA NORMAL (16 linhas) ---")
    print("A | B | C | D | Resultado")
    print("-" * 25)
    for i in range(16):
        a_val = bool(i & 8)
        b_val = bool(i & 4)
        c_val = bool(i & 2)
        d_val = bool(i & 1)
        resultado = (a_val and b_val and c_val) or (b_val and c_val and d_val)
        print(f"{int(a_val)} | {int(b_val)} | {int(c_val)} | {int(d_val)} | {int(resultado)}")
    
    print("\n--- TABELA VERDADE PARA EMERGÊNCIA (16 linhas) ---")
    print("A | B | C | D | Resultado")
    print("-" * 25)
    for i in range(16):
        a_val = bool(i & 8)
        b_val = bool(i & 4)
        c_val = bool(i & 2)
        d_val = bool(i & 1)
        resultado = c_val and (b_val or d_val)
        print(f"{int(a_val)} | {int(b_val)} | {int(c_val)} | {int(d_val)} | {int(resultado)}")
    
    # Análise (Passo 3 - Tarefa 4)
    print("\n--- ANÁLISE ---")
    # Contar situações verdadeiras para Consulta Normal
    count_normal = sum(1 for i in range(16) if ((i & 8) and (i & 4) and (i & 2)) or ((i & 4) and (i & 2) and (i & 1)))
    print(f"Consulta Normal: O paciente pode ser atendido em {count_normal} situações diferentes (de 16).")
    
    # Contar situações verdadeiras para Emergência
    count_emergencia = sum(1 for i in range(16) if (i & 2) and ((i & 4) or (i & 1)))
    print(f"Emergência: O paciente pode ser atendido em {count_emergencia} situações diferentes (de 16).")
    
    # Situação prática (Passo 3 - Tarefa 5)
    print("\n--- SITUAÇÃO PRÁTICA ---")
    print("Condições: A=F, B=V, C=V, D=F")
    consulta_normal_pratica = (False and True and True) or (True and True and False)  # False
    emergencia_pratica = True and (True or False)  # True
    print(f"Consulta Normal: {'Sim' if consulta_normal_pratica else 'Não'}")
    print(f"Emergência: {'Sim' if emergencia_pratica else 'Não'}")

def main():
    """Função principal que controla o loop do programa."""
    while True:
        mostrar_menu()
        try:
            opcao = int(input("Escolha uma opção: "))
        except ValueError:
            print("Erro: Digite um número válido.")
            continue
        
        if opcao == 1:
            cadastrar_paciente()
        elif opcao == 2:
            ver_estatisticas()
        elif opcao == 3:
            buscar_paciente()
        elif opcao == 4:
            listar_pacientes()
        elif opcao == 5:
            verificar_acesso_atendimento()
        elif opcao == 6:
            print("Saindo do sistema. Até logo!")
            break
        else:
            print("Opção inválida. Escolha entre 1 e 6.")
        
        input("\nPressione ENTER para continuar...")

# Executa o programa
if __name__ == "__main__":
    main()
